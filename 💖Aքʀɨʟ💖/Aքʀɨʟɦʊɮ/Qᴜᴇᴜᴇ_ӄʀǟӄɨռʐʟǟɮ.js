const { MessageEmbed } = require("../”Ñ Ä«ü”Ñ…®’º ê ü«ü…Æ/src");
const { A÷Ñ Ä…® ü Ñ…®”º, A÷Ñ Ä…® ü÷Ñ ä Ä…¢…õ Ä } = require("../A÷Ñ Ä…® ü’º…õ ã/April_env");
// =============================================================================================================================
//
//
// GNU GENERAL PUBLIC LICENSE
// Version 3, 29 June 2007
// ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóûùóøùóÆùó∏ùó∂ùóªùòá | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóüùóÆùóØ | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóïùóºùòÅ
//
//
// =============================================================================================================================
module.exports = {
  name: "queue",
  cooldown: 3,
  // =============================================================================================================================
  // GNU GENERAL PUBLIC LICENSE
  // Version 3, 29 June 2007
  // ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóûùóøùóÆùó∏ùó∂ùóªùòá | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóüùóÆùóØ | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóïùóºùòÅ
  // =============================================================================================================================
  async execute(message) {
    try {
      if (
        message.content.startsWith(A÷Ñ Ä…® ü Ñ…®”º + "queue") &&
        message.channel.name !== "A÷Ñ Ä…® ü‚ù£Ô∏è÷Ñ ü«ü è…õ Ä"
      ) {
        message.react("‚ùå");
        message.react("üî•");
        message.channel
          .send(
            new MessageEmbed()
              .setColor("#E0D268")
              .setTitle("‚ö†Ô∏èWarning‚ö†Ô∏è")
              .setAuthor(`ùêÄùê©ùê´ùê¢ùê•‚ù£Ô∏èbyüî±KrakinzLab‚Ñ¢Ô∏è`)
              .setThumbnail(`https://i.postimg.cc/5tgjvj1y/A.png`)
              .setFooter("üî∞ùóüùó∂ùó∞ùó≤ùóªùòÄùó≤: GNU(C)2021 Krakinz & KrakinzLab")
              .setDescription(
                `
**User:** ${message.author}
=========‚öúÔ∏è=========

**Category:** \`üî±Krakinz\`
**Channel:** \`A÷Ñ Ä…® ü‚ù£Ô∏è÷Ñ ü«ü è…õ Ä\`
‚ö†Ô∏èPlease use üëÜüèª for any **·¥Ä·¥ò Ä…™ ü** commands.`
              )
          )
          .catch(console.error)
          .then((message) => {
            message.delete({
              timeout: `${A÷Ñ Ä…® ü÷Ñ ä Ä…¢…õ Ä}`,
            });
          });
        return;
      }
      // =============================================================================================================================
      // GNU GENERAL PUBLIC LICENSE
      // Version 3, 29 June 2007
      // ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóûùóøùóÆùó∏ùó∂ùóªùòá | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóüùóÆùóØ | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóïùóºùòÅ
      // ============================================================================================================================
      if (
        message.content.startsWith(A÷Ñ Ä…® ü Ñ…®”º + "queue") &&
        message.channel.name === "A÷Ñ Ä…® ü‚ù£Ô∏è÷Ñ ü«ü è…õ Ä"
      ) {
        const permissions = message.channel.permissionsFor(message.client.user);
        if (!permissions.has([`MANAGE_MESSAGES`, `ADD_REACTIONS`])) {
          message.react("‚ùå");
          message.react("üî•");
          message.channel
            .send(
              new MessageEmbed()
                .setColor("#E0D268")
                .setTitle("‚ö†Ô∏èWarning‚ö†Ô∏è")
                .setAuthor(`ùêÄùê©ùê´ùê¢ùê•‚ù£Ô∏èbyüî±KrakinzLab‚Ñ¢Ô∏è`)
                .setThumbnail(`https://i.postimg.cc/5tgjvj1y/A.png`)
                .setFooter("üî∞ùóüùó∂ùó∞ùó≤ùóªùòÄùó≤: GNU(C)2021 Krakinz & KrakinzLab")
                .setDescription(
                  `
**User:** ${message.author}
=========‚öúÔ∏è=========

Missing permission to manage messages or add reactions`
                )
            )
            .catch(console.error)
            .then((message) => {
              message.delete({
                timeout: `${A÷Ñ Ä…® ü÷Ñ ä Ä…¢…õ Ä}`,
              });
            });
          return;
        }
        // =============================================================================================================================
        // GNU GENERAL PUBLIC LICENSE
        // Version 3, 29 June 2007
        // ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóûùóøùóÆùó∏ùó∂ùóªùòá | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóüùóÆùóØ | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóïùóºùòÅ
        // ============================================================================================================================
        const queue = message.client.queue.get(message.guild.id);
        if (!queue) {
          message.react("‚ùå");
          message.react("üî•");
          message.channel
            .send(
              new MessageEmbed()
                .setColor("#E0D268")
                .setTitle("‚ö†Ô∏èWarning‚ö†Ô∏è")
                .setAuthor(`ùêÄùê©ùê´ùê¢ùê•‚ù£Ô∏èbyüî±KrakinzLab‚Ñ¢Ô∏è`)
                .setThumbnail(`https://i.postimg.cc/5tgjvj1y/A.png`)
                .setFooter("üî∞ùóüùó∂ùó∞ùó≤ùóªùòÄùó≤: GNU(C)2021 Krakinz & KrakinzLab")
                .setDescription(
                  `
**User:** ${message.author}
=========‚öúÔ∏è=========

‚è∫ Nothing playing in this server`
                )
            )
            .catch(console.error)
            .then((message) => {
              message.delete({
                timeout: `${A÷Ñ Ä…® ü÷Ñ ä Ä…¢…õ Ä}`,
              });
            });
          return;
        }
        // =============================================================================================================================
        // GNU GENERAL PUBLIC LICENSE
        // Version 3, 29 June 2007
        // ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóûùóøùóÆùó∏ùó∂ùóªùòá | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóüùóÆùóØ | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóïùóºùòÅ
        // ============================================================================================================================
        let currentPage = 0;
        message.react("‚úÖ");
        message.react("üçß");
        const embeds = generateQueueEmbed(message, queue.songs);
        const queueEmbed = await message.channel.send(
          `**üè∑Page Num:** - ${currentPage + 1}/${embeds.length}`,
          embeds[currentPage]
        );

        try {
          await queueEmbed.react(`‚¨ÖÔ∏è`);
          await queueEmbed.react(`‚è∫`);
          await queueEmbed.react(`‚û°Ô∏è`);
        } catch (error) {
          console.error(error);
          message.channel.send(error.message).catch(console.error);
        }
        // =============================================================================================================================
        // GNU GENERAL PUBLIC LICENSE
        // Version 3, 29 June 2007
        // ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóûùóøùóÆùó∏ùó∂ùóªùòá | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóüùóÆùóØ | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóïùóºùòÅ
        // ============================================================================================================================
        const filter = (reaction, user) =>
          [`‚¨ÖÔ∏è`, `‚è∫`, `‚û°Ô∏è`].includes(reaction.emoji.name) &&
          message.author.id === user.id;
        const collector = queueEmbed.createReactionCollector(filter, {
          time: 60000,
        });
        // =============================================================================================================================
        // GNU GENERAL PUBLIC LICENSE
        // Version 3, 29 June 2007
        // ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóûùóøùóÆùó∏ùó∂ùóªùòá | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóüùóÆùóØ | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóïùóºùòÅ
        // ============================================================================================================================
        collector.on(`collect`, async (reaction, user) => {
          try {
            if (reaction.emoji.name === `‚û°Ô∏è`) {
              if (currentPage < embeds.length - 1) {
                currentPage++;
                queueEmbed.edit("**üè∑Page Num:** - ", {
                  page: currentPage + 1,
                  length: embeds.length,
                }),
                  embeds[currentPage];
              }
            } else if (reaction.emoji.name === `‚¨ÖÔ∏è`) {
              if (currentPage !== 0) {
                --currentPage;
                queueEmbed.edit("**üè∑Page Num:** - ", {
                  page: currentPage + 1,
                  length: embeds.length,
                }),
                  embeds[currentPage];
              }
            } else {
              collector.stop();
              reaction.message.reactions.removeAll();
            }
            await reaction.users.remove(message.author.id);
          } catch (error) {
            console.error(error);
            return message.channel.send(error.message).catch(console.error);
          }
        });
      }
      // =============================================================================================================================
      // GNU GENERAL PUBLIC LICENSE
      // Version 3, 29 June 2007
      // ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóûùóøùóÆùó∏ùó∂ùóªùòá | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóüùóÆùóØ | ùóûùóøùóÆùó∏ùó∂ùóªùòáùóïùóºùòÅ
      // ============================================================================================================================
    } catch (ErrorApril) {
      message.channel.send(
        new MessageEmbed()
          .setColor("#DB4434")
          .setTitle("üî∫ERROR CAUGHTüîª")
          .setFooter("üî∞ùóüùó∂ùó∞ùó≤ùóªùòÄùó≤: GNU(C)2021 Krakinz & KrakinzLab")
          .setThumbnail("https://i.postimg.cc/5tgjvj1y/A.png")
          .setDescription(`
**April** has encountered an error.

Please report to either 
üî∞**In Discord channel** = https://discord.gg/ucPpXWFK
or
üî∞**In telegram group** = https://t.me/Krakns


**üî∫Error Caughtüîª**
*${ErrorApril}*`)
      );
      console.error(ErrorApril);
    }
  },
};

function generateQueueEmbed(message, queue) {
  let embeds = [];
  let k = 10;
  for (let i = 0; i < queue.length; i += 10) {
    const current = queue.slice(i, k);
    let j = i;
    k += 10;
    const info = current
      .map((track) => `${++j} - [${track.title}](${track.url})`)
      .join(`\n`);
    const embed = new MessageEmbed()
      .setThumbnail("https://i.postimg.cc/5tgjvj1y/A.png")
      .setColor("#6272a4")
      .setFooter("üî∞ùóüùó∂ùó∞ùó≤ùóªùòÄùó≤: GNU(C)2021 Krakinz & KrakinzLab")
      .setDescription(
        `**A÷Ñ Ä…® ü‚ù£Ô∏è÷Ñ ü«ü è…õ Ä**\n\n‚öúÔ∏è**Current Song** -_[${queue[0].title}]_\n\n${info}`
      );
    embeds.push(embed);
  }
  return embeds;
}
