`=================================================================‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî==========================================================================
                                                       GNU GENERAL PUBLIC LICENSE 
                                                         Version 3, 29 June 2007
                                                Copyright (C) 2007 Free Software Foundation
                                            Everyone is permitted to ùó∞ùóºùóΩùòÜ ùóÆùóªùó± ùó±ùó∂ùòÄùòÅùóøùó∂ùóØùòÇùòÅùó≤ verbatim copies
                                                of this license document, ùóØùòÇùòÅ ùó∞ùóµùóÆùóªùó¥ùó∂ùóªùó¥ ùó∂ùòÅ ùó∂ùòÄ ùóªùóºùòÅ ùóÆùóπùóπùóºùòÑùó≤ùó±.
                                                        ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî 
                                                      Discord Music player Bot 
                                            has been licensed under GNU General Public License
                                        ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóõùòÜùóΩùó≤ùó©ùóºùó∂ùó±ùó¶ùóºùòÇùóπ | ùóõùòÜùóΩùó≤ùó©ùóºùó∂ùó±ùóüùóÆùóØ | ùóõùòÜùóΩùó≤ùó©ùóºùó∂ùó±ùòÄ
=================================================================‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî==========================================================================`
const pnoir = require("../…¥·¥è…™ Ä_·¥èÍú±/pnoir");
const { canModifyQueue } = require("../…¥·¥è…™ Ä_·¥èÍú±/noirsys");
/**
 * 
 * 
 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================

 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================
 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================

 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================
 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================

 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================
 * 
 * 
 */
module.exports = {
  name: "skip",
  // description: pnoir.__("skip.…¥·¥è…™ Ä_description"),
/**
 * 
 * 
 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================

 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================
 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================

 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================
 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================

 * ‚Äî‚Ä¢‚Ä¢√∑[ü¶ãNOIRü¶ã]√∑‚Ä¢‚Ä¢‚Äî  ===================================================================================
 * 
 * 
 */
  execute(message, args) {
    try { message.delete(); }
    catch (error) { console.error(error); }

    if (!args.length || isNaN(args[0]))
      return message
        .reply(pnoir.__mf("skip.…¥·¥è…™ Ä_usage_Reply", { prefix: message.client.prefix, name: module.exports.name }))
        .catch(console.error);

    const queue = message.client.queue.get(message.guild.id);


    if (!queue)
      return message.channel.send(pnoir.__("skip.…¥·¥è…™ Ä_error_Not_Queue")).catch(console.error);
    if (!canModifyQueue(message.member))
      return pnoir.__("common.…¥·¥è…™ Ä_error_NotChannel");
    if (args[0] > queue.songs.length)
      return message
        .reply(pnoir.__mf("skip.…¥·¥è…™ Ä_error_Not_Valid", { length: queue.songs.length }))
        .catch(console.error);

    queue.playing = true;

    if (queue.loop) {
      for (let i = 0; i < args[0] - 2; i++) {
        queue.songs.push(queue.songs.shift());
      }
    } else {
      queue.songs = queue.songs.slice(args[0] - 2);
    }

    queue.connection.dispatcher.end();
    queue.textChannel
      .send(pnoir.__mf("skip.…¥·¥è…™ Ä_player_result", { author: message.author, arg: args[0] - 1 }))
      .catch(console.error);
  }
};
